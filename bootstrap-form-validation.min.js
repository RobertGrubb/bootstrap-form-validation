const BootstrapValidation={utilities:{capitalizeFirstLetter:e=>e.charAt(0).toUpperCase()+e.slice(1),bracketValue(e){let t=e.match(/\[(.*?)\]/);return!!t&&t[1]}},validateEmail:e=>e.match(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/),process(e){if("undefined"===window.$)return console.error("JQuery is not loaded."),!1;if(!$(e).length)return console.error(`${e} does not exist.`),!1;let t=(e=$(e)).data("validate-validation");if(!t)return console.error(`${e} has no validation rules set.`),!1;t=t.split("|");let a=[],i=!0,l=e.attr("name")?BootstrapValidation.utilities.capitalizeFirstLetter(e.attr("name").replace("_"," ")):"This field";for(let r=0;r<t.length;r++)if("trim"===t[r])e.val(e.val().trim());else if("required"===t[r])"checkbox"==e.attr("type")?e.is(":checked")||(a.push(`${l} is required`),i=!1):e.val()||(a.push(`${l} is required`),i=!1);else if("email"===t[r])BootstrapValidation.validateEmail(e.val())||(a.push(`${l} must be a valid email address.`),i=!1);else if("number"===t[r])!0===isNaN(e.val())&&(a.push(`${l} must be a number.`),i=!1);else if(t[r].includes("matches")){let n=BootstrapValidation.utilities.bracketValue(t[r]);if(!n){console.log("Matches validation requires an input element identifier (matches[#inputId])");continue}let s=$(n);if(!s.length){console.log("Matches validation failed to run because the specified element does not exist.");continue}let o=s.val();if(!s.attr("name")){console.log("Matches validation failed because the matching element does not have a name attribute.");continue}let d=BootstrapValidation.utilities.capitalizeFirstLetter(s.attr("name").replace("_"," "));e.val()!==o&&(a.push(`${l} must match ${d}`),i=!1)}else if(t[r].includes("min_length")){let u=BootstrapValidation.utilities.bracketValue(t[r]);if(!u){console.log("Min length and max length should only have to parameters (ex min_length[2])");continue}e.val().length<parseInt(u)&&(a.push(`${l} must be atleast ${u} characters.`),i=!1)}else if(t[r].includes("max_length")){let c=BootstrapValidation.utilities.bracketValue(t[r]);if(!c){console.log("Min length and max length should only have to parameters (ex min_length[2])");continue}e.val().length>parseInt(c)&&(a.push(`${l} must be equal to or less than ${c} characters.`),i=!1)}return{errors:a,valid:i}},processForm:e=>{let t=[],a=!0,i=$(e).find("*[data-validate-validation]").toArray();for(let l=0;l<i.length;l++){let r=BootstrapValidation.process(i[l]);if(t.concat(r.errors),a=r.valid,r.valid)$(i[l]).removeClass("is-invalid"),$(i[l]).parent().find(".invalid-feedback").remove();else{let n=$(i[l]).parent().find(".invalid-feedback");n.length?$(i[l]).parent().find(".invalid-feedback").html(r.errors.join("<br />")):$(i[l]).parent().append(`<div class="invalid-feedback text-left">${r.errors.join("<br />")}</div>`),$(i[l]).addClass("is-invalid")}}!0===a&&$(this).find('button[type="submit"]').prop("disabled",!1),$(this).find('button[type="submit"]').prop("disabled",!0)}};window.BootstrapValidation=BootstrapValidation,$(function(){if("undefined"===window.$)return console.error("Bootstrap is not loaded."),!1;window.$('[data-validate-on-submit="true"], [data-validate-on-blur="true"]').on("submit",function(e){console.log("test"),e.preventDefault();let t=[],a=!0,i=$(this).find("*[data-validate-validation]").toArray();console.log(i);for(let l=0;l<i.length;l++){let r=BootstrapValidation.process(i[l]);if(t.concat(r.errors),!1===r.valid&&(a=!1),r.valid)$(i[l]).removeClass("is-invalid"),$(i[l]).parent().find(".invalid-feedback").remove();else{let n=$(i[l]).parent().find(".invalid-feedback");n.length?$(i[l]).parent().find(".invalid-feedback").html(r.errors.join("<br />")):$(i[l]).parent().append(`<div class="invalid-feedback text-left">${r.errors.join("<br />")}</div>`),$(i[l]).addClass("is-invalid")}}return!0===a&&(e.target.submit(),!0)}),window.$('[data-validate-on-blur="true"] input, [data-validate-on-blur="true"] textarea, [data-validate-on-blur="true"] select').on("blur",function(e){let t=!0,a=BootstrapValidation.process(this);if([].concat(a.errors),t=a.valid,a.valid)$(this).removeClass("is-invalid"),$(this).parent().find(".invalid-feedback").remove();else{let i=$(this).parent().find(".invalid-feedback");i.length?$(this).parent().find(".invalid-feedback").html(a.errors.join("<br />")):$(this).parent().append(`<div class="invalid-feedback text-left">${a.errors.join("<br />")}</div>`),$(this).addClass("is-invalid")}BootstrapValidation.processForm($(this).closest("form"))})});